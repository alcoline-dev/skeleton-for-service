-include .env.install

install-init:
	make install-welcome

	@echo "${BLUE} Step 1: Generate docker-compose.install.yaml ${NC}";
	make generate-compose
	@echo "${BLUE} Step 2: Ensure .env.install exists ${NC}"
	make ensure-env
	@echo "${BLUE} Step 3: Remove existing container if any ${NC}"
	make remove-container
	@echo "${BLUE} Step 4: Launch install container ${NC}"
	make up-install-container

	@echo "${BLUE} Step 5: Set GIT identity in container ${NC}"
	make git-config
	@echo "${BLUE} Step 6: Remove existing /app/install directory ${NC}"
	make remove-old
	@echo "${BLUE} Step 7: Install Symfony CLI inside container ${NC}"
	make install-symfony-cli
	@echo "${BLUE} Step 8: Create new project ${NC}"
	make symfony-new
	make remove-container

	@echo "${BLUE} Step 9: Generate and remove files ${NC}"
	make generate-files
	@echo "${BLUE} Step 10: Move to project folder ${NC}"
	make project-move

	make up-d

	@echo "${BLUE} Step 11: Configure composer.json ${NC}"
	make configure-composer
	make configure-folders

	@echo "${BLUE} Step 12: RPC API ${NC}"
	make add-rpc-api

	@echo "${BLUE} Step 13: RPC SDK ${NC}"
	make add-rpc-sdk

	@echo "${BLUE} Step 14: GIT config ${NC}"
	cp .env.local .env.local.dist
	make project-git-config

	@echo "${GREEN} Install complete successfully ${NC}"
	make clear-install

install-welcome:
	@printf "${GREEN}%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s${NC}" \
	"   __  ____________      ______          __       _____                 ____                     ____           __        ____                    ___ " \
	"  / / / / ____/ __ \    /_  __/__  _____/ /_     / ___/__  ______ ___  / __/___  ____  __  __   /  _/___  _____/ /_____ _/ / /__  _____   _   __ |__ \ " \
	" / / / / /_  / / / /_____/ / / _ \/ ___/ __ \    \__ \/ / / / __ \`__ \/ /_/ __ \/ __ \/ / / /   / // __ \/ ___/ __/ __ \`/ / / _ \/ ___/  | | / / __/ /" \
	"/ /_/ / __/ / /_/ /_____/ / /  __/ /__/ / / /   ___/ / /_/ / / / / / / __/ /_/ / / / / /_/ /  _/ // / / (__  ) /_/ /_/ / / /  __/ /      | |/ / / __/ " \
	"\\____/_/    \\____/     /_/  \\___/\\___/_/ /_/   /____/\\__, /_/ /_/ /_/_/  \\____/_/ /_/\\__, /  /___/_/ /_/____/\\__/\\__,_/_/_/\\___/_/       |___(_)____/ " \
	"                                                    /____/                          /____/                                                            "
	@echo  "${PURPLE}"
	@read  -p "Enter Symfony version to install (or press Enter to use latest): " version;
	@echo  "${NC}"
	if [ ! -z "$$version" ]; then \
		echo "SYMFONY_VERSION_INSTALL=$$version" > .env.install.override; \
	else \
		echo "SYMFONY_VERSION_INSTALL=stable" > .env.install.override; \
	fi;
	echo "Version save $(grep SYMFONY_VERSION_INSTALL .env.install.override | cut -d= -f2)";
	@echo  "";


generate-compose:
	@echo 'version: "3"' > docker-compose.install.yaml
	@echo 'services:' >> docker-compose.install.yaml
	@echo "  symfony-install:" >> docker-compose.install.yaml
	@echo "    container_name: symfony_${PROJECT_NAME}_install" >> docker-compose.install.yaml
	@echo "    image: ufotech/php:8.4-fpm" >> docker-compose.install.yaml
	@echo "    environment:" >> docker-compose.install.yaml
	@echo "      WORKDIR: ${WORKDIR}" >> docker-compose.install.yaml
	@if [ -f .env.install.override ]; then \
		version=$$(grep SYMFONY_VERSION_INSTALL .env.install.override | cut -d= -f2); \
		echo "      SYMFONY_VERSION_INSTALL: $$version" >> docker-compose.install.yaml; \
	fi
	@echo "      GIT_AUTHOR_NAME: $$(git config user.name)" >> docker-compose.install.yaml
	@echo "      GIT_AUTHOR_EMAIL: $$(git config user.email)" >> docker-compose.install.yaml
	@echo "    volumes:" >> docker-compose.install.yaml
	@echo "      - ./:${WORKDIR}" >> docker-compose.install.yaml
	@echo  "";

ensure-env:
	@if [ ! -f .env.install ]; then cp .env.install.dist .env.install; fi
	@echo  "";

remove-container:
	@if docker ps -a --format '{{.Names}}' | grep -Eq "^symfony_${PROJECT_NAME}_install$$"; then \
		docker rm -f symfony_${PROJECT_NAME}_install; \
	fi
	@echo  "";

up-install-container:
	docker compose -f docker-compose.install.yaml --env-file .env.install up -d
	@echo  "";


install-symfony-cli:
	docker exec symfony_${PROJECT_NAME}_install sh -c "curl -sS https://get.symfony.com/cli/installer | bash && mv /root/.symfony5/bin/symfony /usr/local/bin/symfony"
	@echo  "";


remove-old:
	docker exec symfony_${PROJECT_NAME}_install sh -c "rm -rf /app/install"
	@echo  "";


git-config:
	docker exec symfony_${PROJECT_NAME}_install sh -c "git config --global user.name \"$$(git config user.name)\""
	docker exec symfony_${PROJECT_NAME}_install sh -c "git config --global user.email \"$$(git config user.email)\""
	@echo  "";


symfony-new:
	@if [ -f .env.install.override ]; then \
	    docker exec -t symfony_${PROJECT_NAME}_install sh -c "symfony new /app/install --version=\$$SYMFONY_VERSION_INSTALL --webapp"; \
	else \
	    docker exec -t symfony_${PROJECT_NAME}_install sh -c "symfony new /app/install --version=\$$SYMFONY_VERSION_INSTALL --webapp"; \
	fi
	@echo  "";

generate-files:
	rm -rf ./install/.git
	rm -rf ./install/compose.yaml
	rm -rf ./install/compose.override.yaml
	rm -rf ./install/.env.dev
	rm -rf ./install/.env.test
	rm -rf ./.env.install.override
	rm -rf ./docker-compose.install.yaml

	echo  "# Copy from project env file" >> ./install/.env.local
	cat .env.install >> ./install/.env.local
	echo  "" >> ./install/.env.local
	echo  "" >> ./install/.env.local

	echo  "# Generated by install" >> ./install/.env.local

	@sh -c '\
		envfile=./install/.env; \
		while read line; do \
			if [ "$${line:0:1}" != "#" ] && [ "$${line:0:12}" != "DATABASE_URL" ]; then \
				echo "$$line" >> ./install/.env.local; \
			fi; \
		done < $$envfile \
	'
	echo  "" >> ./install/.env.local
	echo "DATABASE_URL=mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db_mysql/${MYSQL_DATABASE}?serverVersion=8&charset=utf8mb4" >> ./install/.env.local
	cat ./.gitignore >> ./install/.gitignore

project-move:
	@cp -rf ./install/ ./
	@rm -rf ./install

configure-composer:
	$(DOCKER_EXEC) 'apt-get update && apt-get install -y jq curl && \
    	curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/bin/yq && \
    	chmod +x /usr/bin/yq && \
    	yq --version && jq --version';
	@echo "${BLUE} Configure composer ${NC}"
	$(DOCKER_EXEC) "composer require php '^8.4' --no-update"
	$(DOCKER_EXEC) "composer require doctrine/dbal: '^4'"
	$(DOCKER_EXEC) "composer config extra.symfony.allow-contrib true --json"
	$(DOCKER_EXEC) "composer config extra.symfony.endpoint --json '[\"https://api.github.com/repos/ufo-tech/recipes/contents/index.json?ref=main\",\"flex://defaults\"]'"
	$(DOCKER_EXEC) "composer remove twig/extra-bundle symfony/ux-turbo symfony/stimulus-bundle symfony/form symfony/asset symfony/asset-mapper --no-scripts"
	$(DOCKER_EXEC) "composer require ufo-tech/doctrine-behaviors ufo-tech/doctrine-helper scienta/doctrine-json-functions --no-scripts"
	$(DOCKER_EXEC) 'composer auto-scripts'

configure-folders:
	$(DOCKER_EXEC) 'mkdir -p ./src/CQRS'
	$(DOCKER_EXEC) 'mkdir -p ./src/CQRS/Commands && echo "" > ./src/CQRS/Commands/.gitignore'
	$(DOCKER_EXEC) 'mkdir -p ./src/CQRS/Queries && echo "" > ./src/CQRS/Queries/.gitignore';
	$(DOCKER_EXEC) 'mkdir -p ./src/Services && echo "" > ./src/Services/.gitignore';
	$(DOCKER_EXEC) 'cp -rf ./docker/configs/php/src/* ./src';
	$(DOCKER_EXEC) 'rm -rf ./docker/configs/php';
	$(DOCKER_EXEC) 'set -e; \
        f="config/packages/doctrine.yaml"; \
        [ -f "$$f" ] || { echo "skip: $$f not found"; exit 0; }; \
        yq -i \
          ".doctrine.dbal.logging = false | \
           .doctrine.dbal.profiling = false | \
           .doctrine.dbal.profiling_collect_backtrace = false" \
          "$$f"; \
        echo "patched: $$f"';



add-rpc-api:
	@echo  "${PURPLE}"
	@read -p "Does the project require an RPC API? (y/n)[y]: " api; \
	echo  "${NC}"; \
	if [ -z "$$api" ] || [ "$$api" = "Y" ] || [ "$$api" = "y" ]; then \
		$(DOCKER_EXEC) 'mkdir -p ./src/API && echo "" > ./src/API/.gitignore'; \
		echo  "" >> .env.local; \
		echo "JSON_RPC_KEY=${PROJECT_NAME}_token" >> .env.local; \
		echo "JSON_RPC_TOKEN=test" >> .env.local; \
		$(DOCKER_EXEC) "composer require -n ufo-tech/json-rpc-bundle"; \
		$(DOCKER_EXEC) 'set -e; \
        	f="config/packages/ufo_json_rpc.yaml"; \
        	[ -f "$$f" ] || { echo "skip: $$f not found"; exit 0; }; \
        	yq -i \
        	  ".ufo_json_rpc.docs.validations.symfony_asserts = true | \
        	   .ufo_json_rpc.docs.project_name = \"${PROJECT_NAME}\" | \
        	   .ufo_json_rpc.security.token_name = \"%env(resolve:JSON_RPC_KEY)%\" | \
        	   .ufo_json_rpc.security.clients_tokens = [\"%env(resolve:JSON_RPC_TOKEN)%\"]" \
        	  "$$f"; \
        	echo "patched: $$f"'; \
	fi

add-rpc-sdk:
	@echo "${PURPLE}"
	@read -p "Does the project require an SDK? (y/n)[n]: " sdk; \
	echo "${NC}"; \
	if [ "$$sdk" = "Y" ] || [ "$$sdk" = "y" ]; then \
	  	$(DOCKER_EXEC) 'jq ".autoload[\"psr-4\"][\"App\\\\SDK\\\\\"] = \"sdk/\" | ." composer.json > composer.json.tmp && mv composer.json.tmp composer.json'; \
		$(DOCKER_EXEC) 'mkdir -p ./sdk && echo "" > ./sdk/.gitignore'; \
		$(DOCKER_EXEC) 'composer require -n ufo-tech/json-rpc-sdk-bundle --no-scripts'; \
		docker exec php_$(PROJECT_NAME) /bin/bash -c '\
			set -e; \
			f=config/packages/json_rpc_sdk.yaml; \
			[ -f "$$f" ] || { echo "skip: $$f"; exit 0; }; \
			yq -i ".json_rpc_sdk.vendors = []" "$$f"; \
			echo "patched: $$f"'; \
		while :; do \
			echo; read -p "Add RPC API vendor? (y/n)[n]: " add; [ -z "$$add" ] && add=n; case "$$add" in y|Y) ;; *) break ;; esac; \
			read -p "vendor_name: " vname; \
			read -p "vendor_host: " vhost; \
			read -p "vendor_api_key: " vkey; \
			read -p "vendor_token: " vtok; \
			VUP=$$(printf "%s" "$$vname" | tr '[:lower:]' '[:upper:]' | sed 's/[^A-Z0-9]/_/g; s/_\{2,\}/_/g; s/^_\|_$$//g'); \
			echo  "" >> .env.local; \
			echo "$${VUP}_API_HOST=$$vhost" >> .env.local; \
			echo "$${VUP}_API_KEY=$$vkey"   >> .env.local; \
			echo "$${VUP}_API_TOKEN=$$vtok" >> .env.local; \
			docker exec -e VNAME="$$vname" -e HOST="$${VUP}_API_HOST" -e KEY="$${VUP}_API_KEY" -e TOKEN="$${VUP}_API_TOKEN" php_$(PROJECT_NAME) /bin/bash -c '\
				set -e; \
				f=config/packages/json_rpc_sdk.yaml; \
				[ -f "$$f" ] || { echo "skip: $$f"; exit 0; }; \
				yq -i ".json_rpc_sdk.vendors += [{\"name\": \"$$VNAME\", \"url\": \"%env(resolve:$$HOST)%\", \"token_key\": \"%env(resolve:$$KEY)%\", \"token\": \"%env(resolve:$$TOKEN)%\"}]" "$$f"; \
				echo "patched: $$f"'; \
		done; \
		$(DOCKER_EXEC) 'composer auto-scripts'; \
		$(DOCKER_EXEC) 'bin/console ufo:sdk:generate'; \
		echo "json_rpc_sdk.yaml updated"; \
	fi

project-git-config:
	@sh -c '\
		echo "${YELLOW_BG}"; \
		echo "Warning: if you specify a repository that already contains data, it will be lost. This action is irreversible.${NC}"; \
		echo "${PURPLE}"; \
		read -p "Enter the git repository url for your new project (or press Enter to skip): " git_url; \
		echo "${NC}"; \
		rm -rf ./.git; \
		if [ ! -z "$$git_url" ]; then \
			git init && git remote add origin "$$git_url" && git add . && git commit -m "symfony install" && git push --force origin main; \
			echo "Git initialized with remote $$git_url"; \
		else \
			echo "Git not initialized"; \
		fi; \
		echo ""; \
	'

